var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useChannelPreviewData = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _throttle = _interopRequireDefault(require("lodash/throttle"));
var _useIsChannelMuted2 = require("./useIsChannelMuted");
var useChannelPreviewData = function useChannelPreviewData(channel, client, forceUpdate) {
  var _useState = (0, _react.useState)(channel.state.messages[channel.state.messages.length - 1]),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    lastMessage = _useState2[0],
    setLastMessage = _useState2[1];
  var _useState3 = (0, _react.useState)(channel.countUnread()),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    unread = _useState4[0],
    setUnread = _useState4[1];
  var _useIsChannelMuted = (0, _useIsChannelMuted2.useIsChannelMuted)(channel),
    muted = _useIsChannelMuted.muted;
  (0, _react.useEffect)(function () {
    var handleReadEvent = function handleReadEvent(event) {
      if (!event.cid) return;
      if (channel.cid === event.cid) setUnread(0);
    };
    var _client$on = client.on('notification.mark_read', handleReadEvent),
      unsubscribe = _client$on.unsubscribe;
    return unsubscribe;
  }, [client, channel]);
  (0, _react.useEffect)(function () {
    var handleUnreadEvent = function handleUnreadEvent(event) {
      var _event$user, _client$user;
      if (!event.cid) return;
      if (channel.cid !== event.cid) return;
      if (((_event$user = event.user) == null ? void 0 : _event$user.id) !== ((_client$user = client.user) == null ? void 0 : _client$user.id)) return;
      setUnread(channel.countUnread());
    };
    var _client$on2 = client.on('notification.mark_unread', handleUnreadEvent),
      unsubscribe = _client$on2.unsubscribe;
    return unsubscribe;
  }, [client, channel]);
  var refreshUnreadCount = (0, _react.useMemo)(function () {
    return (0, _throttle["default"])(function () {
      if (muted) {
        setUnread(0);
      } else {
        setUnread(channel.countUnread());
      }
    }, 400);
  }, [channel, muted]);
  (0, _react.useEffect)(function () {
    refreshUnreadCount();
    var handleEvent = function handleEvent() {
      setLastMessage(channel.state.latestMessages[channel.state.latestMessages.length - 1]);
      refreshUnreadCount();
    };
    var listeners = [channel.on('message.new', handleEvent), channel.on('message.updated', handleEvent), channel.on('message.deleted', handleEvent), channel.on('message.undeleted', handleEvent), channel.on('channel.truncated', handleEvent)];
    return function () {
      return listeners.forEach(function (l) {
        return l.unsubscribe();
      });
    };
  }, [channel, refreshUnreadCount, forceUpdate]);
  return {
    lastMessage: lastMessage,
    muted: muted,
    unread: unread
  };
};
exports.useChannelPreviewData = useChannelPreviewData;
//# sourceMappingURL=useChannelPreviewData.js.map