var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isMaxNumberOfVotesValid = exports.CreatePollContent = exports.CreatePoll = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = require("react-native-reanimated");
var _streamChat = require("stream-chat");
var _components = require("./components");
var _contexts = require("../../contexts");
var _icons = require("../../icons");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/CreatePollContent.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var isMaxNumberOfVotesValid = function isMaxNumberOfVotesValid(maxNumberOfVotes) {
  var parsedMaxNumberOfVotes = Number(maxNumberOfVotes);
  return !isNaN(parsedMaxNumberOfVotes) && parsedMaxNumberOfVotes > 1 && parsedMaxNumberOfVotes <= 10;
};
exports.isMaxNumberOfVotesValid = isMaxNumberOfVotesValid;
var CreatePollContent = function CreatePollContent() {
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    pollTitle = _useState2[0],
    setPollTitle = _useState2[1];
  var _useState3 = (0, _react.useState)([{
      text: ''
    }]),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    pollOptions = _useState4[0],
    setPollOptions = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    multipleAnswersAllowed = _useState6[0],
    setMultipleAnswersAllowed = _useState6[1];
  var _useState7 = (0, _react.useState)(''),
    _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
    maxVotesPerPerson = _useState8[0],
    setMaxVotesPerPerson = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2["default"])(_useState9, 2),
    maxVotesPerPersonEnabled = _useState10[0],
    setMaxVotesPerPersonEnabled = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2["default"])(_useState11, 2),
    isAnonymous = _useState12[0],
    setIsAnonymous = _useState12[1];
  var _useState13 = (0, _react.useState)(false),
    _useState14 = (0, _slicedToArray2["default"])(_useState13, 2),
    optionSuggestionsAllowed = _useState14[0],
    setOptionSuggestionsAllowed = _useState14[1];
  var _useState15 = (0, _react.useState)(false),
    _useState16 = (0, _slicedToArray2["default"])(_useState15, 2),
    commentsAllowed = _useState16[0],
    setCommentsAllowed = _useState16[1];
  var _useState17 = (0, _react.useState)([]),
    _useState18 = (0, _slicedToArray2["default"])(_useState17, 2),
    duplicates = _useState18[0],
    setDuplicates = _useState18[1];
  var _useCreatePollContent = (0, _contexts.useCreatePollContentContext)(),
    closePollCreationDialog = _useCreatePollContent.closePollCreationDialog,
    createAndSendPoll = _useCreatePollContent.createAndSendPoll;
  var currentOptionPositions = (0, _reactNativeReanimated.useSharedValue)({
    inverseIndexCache: {
      0: 0
    },
    positionCache: {
      0: {
        updatedIndex: 0,
        updatedTop: 0
      }
    }
  });
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_error = _useTheme$theme$color.accent_error,
    bg_user = _useTheme$theme$color.bg_user,
    black = _useTheme$theme$color.black,
    white = _useTheme$theme$color.white,
    _useTheme$theme$poll$ = _useTheme$theme.poll.createContent,
    addComment = _useTheme$theme$poll$.addComment,
    anonymousPoll = _useTheme$theme$poll$.anonymousPoll,
    headerContainer = _useTheme$theme$poll$.headerContainer,
    maxVotes = _useTheme$theme$poll$.maxVotes,
    multipleAnswers = _useTheme$theme$poll$.multipleAnswers,
    name = _useTheme$theme$poll$.name,
    scrollView = _useTheme$theme$poll$.scrollView,
    sendButton = _useTheme$theme$poll$.sendButton,
    suggestOption = _useTheme$theme$poll$.suggestOption;
  (0, _react.useEffect)(function () {
    var seenTexts = new Set();
    var duplicateTexts = new Set();
    var _iterator = _createForOfIteratorHelper(pollOptions),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var option = _step.value;
        var text = option.text;
        if (seenTexts.has(text)) {
          duplicateTexts.add(text);
        }
        if (text.length > 0) {
          seenTexts.add(text);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    setDuplicates(Array.from(duplicateTexts));
  }, [pollOptions]);
  var isPollValid = pollTitle && (pollTitle == null ? void 0 : pollTitle.length) > 0 && duplicates.length === 0 && (maxVotesPerPersonEnabled && isMaxNumberOfVotesValid(maxVotesPerPerson) || !maxVotesPerPersonEnabled);
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.headerContainer, {
        backgroundColor: white
      }, headerContainer],
      children: [(0, _jsxRuntime.jsx)(_components.PollModalHeader, {
        onPress: function onPress() {
          return closePollCreationDialog == null ? void 0 : closePollCreationDialog();
        },
        title: t('Create Poll')
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        disabled: !isPollValid,
        onPress: function onPress() {
          var currentPollOptions = Object.assign({}, pollOptions);
          var reorderedPollOptions = [];
          for (var i = 0; i < pollOptions.length; i++) {
            var currentOption = currentPollOptions[currentOptionPositions.value.inverseIndexCache[i]];
            if (currentOption.text.length > 0) {
              reorderedPollOptions.push(currentOption);
            }
          }
          createAndSendPoll(Object.assign({
            allow_answers: commentsAllowed,
            allow_user_suggested_options: optionSuggestionsAllowed,
            enforce_unique_vote: !multipleAnswersAllowed,
            name: pollTitle,
            options: reorderedPollOptions,
            voting_visibility: isAnonymous ? _streamChat.VotingVisibility.anonymous : _streamChat.VotingVisibility["public"]
          }, isMaxNumberOfVotesValid(maxVotesPerPerson) && maxVotesPerPersonEnabled ? {
            max_votes_allowed: Number(maxVotesPerPerson)
          } : {}));
        },
        style: [styles.sendButton, sendButton],
        children: (0, _jsxRuntime.jsx)(_icons.SendPoll, {
          height: 24,
          pathFill: isPollValid ? '#005DFF' : '#B4BBBA',
          viewBox: "0 0 24 24",
          width: 24
        })
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNativeGestureHandler.ScrollView, {
      contentContainerStyle: {
        paddingBottom: 70
      },
      style: [styles.scrollView, {
        backgroundColor: white
      }, scrollView],
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.text, {
          color: black
        }, name.title],
        children: t('Questions')
      }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        onChangeText: setPollTitle,
        placeholder: t('Ask a question'),
        style: [styles.textInputWrapper, styles.text, {
          backgroundColor: bg_user,
          color: black
        }, name.input],
        value: pollTitle
      }), (0, _jsxRuntime.jsx)(_components.CreatePollOptions, {
        currentOptionPositions: currentOptionPositions,
        duplicates: duplicates,
        pollOptions: pollOptions,
        setPollOptions: setPollOptions
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.multipleAnswersWrapper, {
          backgroundColor: bg_user
        }, multipleAnswers.wrapper],
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.multipleAnswersRow, multipleAnswers.row],
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.text, {
              color: black
            }, multipleAnswers.title],
            children: t('Multiple answers')
          }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
            onValueChange: function onValueChange() {
              if (multipleAnswersAllowed) {
                setMaxVotesPerPersonEnabled(false);
              }
              setMultipleAnswersAllowed(!multipleAnswersAllowed);
            },
            value: multipleAnswersAllowed
          })]
        }), multipleAnswersAllowed ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.maxVotesWrapper, maxVotes.wrapper],
          children: [maxVotesPerPersonEnabled && !isMaxNumberOfVotesValid(maxVotesPerPerson) ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.maxVotesValidationText, {
              color: accent_error
            }, maxVotes.validationText],
            children: t('Type a number from 2 to 10')
          }) : null, (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: {
              flexDirection: 'row'
            },
            children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
              inputMode: "numeric",
              onChangeText: setMaxVotesPerPerson,
              placeholder: t('Maximum votes per person'),
              style: [styles.maxVotesInput, {
                color: black
              }, maxVotes.input],
              value: maxVotesPerPerson
            }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
              onValueChange: function onValueChange() {
                return setMaxVotesPerPersonEnabled(!maxVotesPerPersonEnabled);
              },
              value: maxVotesPerPersonEnabled
            })]
          })]
        }) : null]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.textInputWrapper, {
          backgroundColor: bg_user
        }, anonymousPoll.wrapper],
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.text, {
            color: black
          }, anonymousPoll.title],
          children: t('Anonymous poll')
        }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
          onValueChange: function onValueChange() {
            return setIsAnonymous(!isAnonymous);
          },
          value: isAnonymous
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.textInputWrapper, {
          backgroundColor: bg_user
        }, suggestOption.wrapper],
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.text, {
            color: black
          }, suggestOption.title],
          children: t('Suggest an option')
        }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
          onValueChange: function onValueChange() {
            return setOptionSuggestionsAllowed(!optionSuggestionsAllowed);
          },
          value: optionSuggestionsAllowed
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.textInputWrapper, {
          backgroundColor: bg_user
        }, addComment.wrapper],
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.text, {
            color: black
          }, addComment.title],
          children: t('Add a comment')
        }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
          onValueChange: function onValueChange() {
            return setCommentsAllowed(!commentsAllowed);
          },
          value: commentsAllowed
        })]
      })]
    })]
  });
};
exports.CreatePollContent = CreatePollContent;
var CreatePoll = function CreatePoll(_ref) {
  var closePollCreationDialog = _ref.closePollCreationDialog,
    CreatePollContentOverride = _ref.CreatePollContent,
    createPollOptionHeight = _ref.createPollOptionHeight,
    sendMessage = _ref.sendMessage;
  var _useChatContext = (0, _contexts.useChatContext)(),
    client = _useChatContext.client;
  var createAndSendPoll = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(pollData) {
      var poll;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return client.polls.createPoll(pollData);
          case 2:
            poll = _context.sent;
            _context.next = 5;
            return sendMessage({
              customMessageData: {
                poll_id: poll.id
              }
            });
          case 5:
            closePollCreationDialog == null ? void 0 : closePollCreationDialog();
          case 6:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [client, sendMessage, closePollCreationDialog]);
  return (0, _jsxRuntime.jsx)(_contexts.CreatePollContentProvider, {
    value: {
      closePollCreationDialog: closePollCreationDialog,
      createAndSendPoll: createAndSendPoll,
      createPollOptionHeight: createPollOptionHeight,
      sendMessage: sendMessage
    },
    children: CreatePollContentOverride ? (0, _jsxRuntime.jsx)(CreatePollContentOverride, {}) : (0, _jsxRuntime.jsx)(CreatePollContent, {})
  });
};
exports.CreatePoll = CreatePoll;
var styles = _reactNative.StyleSheet.create({
  headerContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between'
  },
  maxVotesInput: {
    flex: 1,
    fontSize: 16
  },
  maxVotesValidationText: {
    fontSize: 12,
    left: 16,
    position: 'absolute',
    top: 0
  },
  maxVotesWrapper: {
    alignItems: 'flex-start',
    flexDirection: 'column',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 18
  },
  multipleAnswersRow: {
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 18
  },
  multipleAnswersWrapper: {
    borderRadius: 12,
    marginTop: 16
  },
  scrollView: {
    flex: 1,
    padding: 16
  },
  sendButton: {
    paddingHorizontal: 16,
    paddingVertical: 18
  },
  text: {
    fontSize: 16
  },
  textInputWrapper: {
    alignItems: 'center',
    borderRadius: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 16,
    paddingHorizontal: 16,
    paddingVertical: 18
  }
});
//# sourceMappingURL=CreatePollContent.js.map