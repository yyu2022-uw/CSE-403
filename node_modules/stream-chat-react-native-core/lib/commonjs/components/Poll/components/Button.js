var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VoteButton = exports.ViewResultsButton = exports.SuggestOptionButton = exports.ShowAllVotesButton = exports.ShowAllOptionsButton = exports.ShowAllCommentsButton = exports.GenericPollButton = exports.EndVoteButton = exports.AnswerListAddCommentButton = exports.AddCommentButton = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _PollAnswersList = require("./PollAnswersList");
var _PollInputDialog = require("./PollInputDialog");
var _PollModalHeader = require("./PollModalHeader");
var _PollOption = require("./PollOption");
var _PollResults = require("./PollResults");
var _contexts = require("../../../contexts");
var _icons = require("../../../icons");
var _usePollState9 = require("../hooks/usePollState");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/components/Button.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var GenericPollButton = function GenericPollButton(_ref) {
  var onPress = _ref.onPress,
    title = _ref.title;
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    accent_dark_blue = _useTheme$theme.colors.accent_dark_blue,
    _useTheme$theme$poll$ = _useTheme$theme.poll.button,
    container = _useTheme$theme$poll$.container,
    text = _useTheme$theme$poll$.text;
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
    onPress: onPress,
    style: [styles.container, container],
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.text, {
        color: accent_dark_blue
      }, text],
      children: title
    })
  });
};
exports.GenericPollButton = GenericPollButton;
var ViewResultsButton = function ViewResultsButton(props) {
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t;
  var _usePollContext = (0, _contexts.usePollContext)(),
    message = _usePollContext.message,
    poll = _usePollContext.poll;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    showResults = _useState2[0],
    setShowResults = _useState2[1];
  var onPress = props.onPress;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        poll: poll
      });
      return;
    }
    setShowResults(true);
  }, [message, onPress, poll]);
  var _useTheme2 = (0, _contexts.useTheme)(),
    white = _useTheme2.theme.colors.white;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(GenericPollButton, {
      onPress: onPressHandler,
      title: t('View Results')
    }), showResults ? (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      animationType: "slide",
      onRequestClose: function onRequestClose() {
        return setShowResults(false);
      },
      visible: showResults,
      children: (0, _jsxRuntime.jsxs)(_reactNative.SafeAreaView, {
        style: {
          backgroundColor: white,
          flex: 1
        },
        children: [(0, _jsxRuntime.jsx)(_PollModalHeader.PollModalHeader, {
          onPress: function onPress() {
            return setShowResults(false);
          },
          title: t('Poll Results')
        }), (0, _jsxRuntime.jsx)(_PollResults.PollResults, {
          message: message,
          poll: poll
        })]
      })
    }) : null]
  });
};
exports.ViewResultsButton = ViewResultsButton;
var EndVoteButton = function EndVoteButton() {
  var _useTranslationContex2 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex2.t;
  var _usePollState = (0, _usePollState9.usePollState)(),
    createdBy = _usePollState.createdBy,
    endVote = _usePollState.endVote,
    isClosed = _usePollState.isClosed;
  var _useChatContext = (0, _contexts.useChatContext)(),
    client = _useChatContext.client;
  return !isClosed && (createdBy == null ? void 0 : createdBy.id) === client.userID ? (0, _jsxRuntime.jsx)(GenericPollButton, {
    onPress: endVote,
    title: t('End Vote')
  }) : null;
};
exports.EndVoteButton = EndVoteButton;
var AddCommentButton = function AddCommentButton(props) {
  var _ownAnswer$answer_tex;
  var _useTranslationContex3 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex3.t;
  var _usePollContext2 = (0, _contexts.usePollContext)(),
    message = _usePollContext2.message,
    poll = _usePollContext2.poll;
  var _usePollState2 = (0, _usePollState9.usePollState)(),
    addComment = _usePollState2.addComment,
    allowAnswers = _usePollState2.allowAnswers,
    isClosed = _usePollState2.isClosed,
    ownAnswer = _usePollState2.ownAnswer;
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    showAddCommentDialog = _useState4[0],
    setShowAddCommentDialog = _useState4[1];
  var onPress = props.onPress;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        poll: poll
      });
      return;
    }
    setShowAddCommentDialog(true);
  }, [message, onPress, poll]);
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [!isClosed && allowAnswers ? (0, _jsxRuntime.jsx)(GenericPollButton, {
      onPress: onPressHandler,
      title: t('Add a comment')
    }) : null, showAddCommentDialog ? (0, _jsxRuntime.jsx)(_PollInputDialog.PollInputDialog, {
      closeDialog: function closeDialog() {
        return setShowAddCommentDialog(false);
      },
      initialValue: (_ownAnswer$answer_tex = ownAnswer == null ? void 0 : ownAnswer.answer_text) != null ? _ownAnswer$answer_tex : '',
      onSubmit: addComment,
      title: t('Add a comment'),
      visible: showAddCommentDialog
    }) : null]
  });
};
exports.AddCommentButton = AddCommentButton;
var ShowAllCommentsButton = function ShowAllCommentsButton(props) {
  var _useTranslationContex4 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex4.t;
  var _usePollContext3 = (0, _contexts.usePollContext)(),
    message = _usePollContext3.message,
    poll = _usePollContext3.poll;
  var _usePollState3 = (0, _usePollState9.usePollState)(),
    answersCount = _usePollState3.answersCount;
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    showAnswers = _useState6[0],
    setShowAnswers = _useState6[1];
  var onPress = props.onPress;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        poll: poll
      });
      return;
    }
    setShowAnswers(true);
  }, [message, onPress, poll]);
  var _useTheme3 = (0, _contexts.useTheme)(),
    white = _useTheme3.theme.colors.white;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [answersCount && answersCount > 0 ? (0, _jsxRuntime.jsx)(GenericPollButton, {
      onPress: onPressHandler,
      title: t('View {{count}} comments', {
        count: answersCount
      })
    }) : null, showAnswers ? (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      animationType: "slide",
      onRequestClose: function onRequestClose() {
        return setShowAnswers(false);
      },
      visible: showAnswers,
      children: (0, _jsxRuntime.jsxs)(_reactNative.SafeAreaView, {
        style: {
          backgroundColor: white,
          flex: 1
        },
        children: [(0, _jsxRuntime.jsx)(_PollModalHeader.PollModalHeader, {
          onPress: function onPress() {
            return setShowAnswers(false);
          },
          title: t('Poll Comments')
        }), (0, _jsxRuntime.jsx)(_PollAnswersList.PollAnswersList, {
          message: message,
          poll: poll
        })]
      })
    }) : null]
  });
};
exports.ShowAllCommentsButton = ShowAllCommentsButton;
var AnswerListAddCommentButton = function AnswerListAddCommentButton(props) {
  var _ownAnswer$answer_tex2;
  var _useTranslationContex5 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex5.t;
  var _usePollContext4 = (0, _contexts.usePollContext)(),
    message = _usePollContext4.message,
    poll = _usePollContext4.poll;
  var _usePollState4 = (0, _usePollState9.usePollState)(),
    addComment = _usePollState4.addComment,
    ownAnswer = _usePollState4.ownAnswer;
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
    showAddCommentDialog = _useState8[0],
    setShowAddCommentDialog = _useState8[1];
  var onPress = props.onPress;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        poll: poll
      });
      return;
    }
    setShowAddCommentDialog(true);
  }, [message, onPress, poll]);
  var _useTheme4 = (0, _contexts.useTheme)(),
    _useTheme4$theme = _useTheme4.theme,
    _useTheme4$theme$colo = _useTheme4$theme.colors,
    accent_dark_blue = _useTheme4$theme$colo.accent_dark_blue,
    bg_user = _useTheme4$theme$colo.bg_user,
    _useTheme4$theme$poll = _useTheme4$theme.poll,
    buttonContainer = _useTheme4$theme$poll.answersList.buttonContainer,
    text = _useTheme4$theme$poll.button.text;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: onPressHandler,
      style: [styles.answerListAddCommentContainer, {
        backgroundColor: bg_user
      }, buttonContainer],
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.text, {
          color: accent_dark_blue
        }, text],
        children: ownAnswer ? t('Update your comment') : t('Add a comment')
      })
    }), showAddCommentDialog ? (0, _jsxRuntime.jsx)(_PollInputDialog.PollInputDialog, {
      closeDialog: function closeDialog() {
        return setShowAddCommentDialog(false);
      },
      initialValue: (_ownAnswer$answer_tex2 = ownAnswer == null ? void 0 : ownAnswer.answer_text) != null ? _ownAnswer$answer_tex2 : '',
      onSubmit: addComment,
      title: t('Add a comment'),
      visible: showAddCommentDialog
    }) : null]
  });
};
exports.AnswerListAddCommentButton = AnswerListAddCommentButton;
var SuggestOptionButton = function SuggestOptionButton(props) {
  var _useTranslationContex6 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex6.t;
  var _usePollContext5 = (0, _contexts.usePollContext)(),
    message = _usePollContext5.message,
    poll = _usePollContext5.poll;
  var _usePollState5 = (0, _usePollState9.usePollState)(),
    addOption = _usePollState5.addOption,
    allowUserSuggestedOptions = _usePollState5.allowUserSuggestedOptions,
    isClosed = _usePollState5.isClosed;
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2["default"])(_useState9, 2),
    showAddOptionDialog = _useState10[0],
    setShowAddOptionDialog = _useState10[1];
  var onPress = props.onPress;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        poll: poll
      });
      return;
    }
    setShowAddOptionDialog(true);
  }, [message, onPress, poll]);
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [!isClosed && allowUserSuggestedOptions ? (0, _jsxRuntime.jsx)(GenericPollButton, {
      onPress: onPressHandler,
      title: t('Suggest an option')
    }) : null, showAddOptionDialog ? (0, _jsxRuntime.jsx)(_PollInputDialog.PollInputDialog, {
      closeDialog: function closeDialog() {
        return setShowAddOptionDialog(false);
      },
      onSubmit: addOption,
      title: t('Suggest an option'),
      visible: showAddOptionDialog
    }) : null]
  });
};
exports.SuggestOptionButton = SuggestOptionButton;
var ShowAllOptionsButton = function ShowAllOptionsButton(props) {
  var _useTranslationContex7 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex7.t;
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2["default"])(_useState11, 2),
    showAllOptions = _useState12[0],
    setShowAllOptions = _useState12[1];
  var _usePollContext6 = (0, _contexts.usePollContext)(),
    message = _usePollContext6.message,
    poll = _usePollContext6.poll;
  var _usePollState6 = (0, _usePollState9.usePollState)(),
    options = _usePollState6.options;
  var onPress = props.onPress;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        poll: poll
      });
      return;
    }
    setShowAllOptions(true);
  }, [message, onPress, poll]);
  var _useTheme5 = (0, _contexts.useTheme)(),
    white = _useTheme5.theme.colors.white;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [options && options.length > 10 ? (0, _jsxRuntime.jsx)(GenericPollButton, {
      onPress: onPressHandler,
      title: t('See all {{count}} options', {
        count: options.length
      })
    }) : null, showAllOptions ? (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      animationType: "slide",
      onRequestClose: function onRequestClose() {
        return setShowAllOptions(false);
      },
      visible: showAllOptions,
      children: (0, _jsxRuntime.jsxs)(_reactNative.SafeAreaView, {
        style: {
          backgroundColor: white,
          flex: 1
        },
        children: [(0, _jsxRuntime.jsx)(_PollModalHeader.PollModalHeader, {
          onPress: function onPress() {
            return setShowAllOptions(false);
          },
          title: t('Poll Options')
        }), (0, _jsxRuntime.jsx)(_PollOption.PollAllOptions, {
          message: message,
          poll: poll
        })]
      })
    }) : null]
  });
};
exports.ShowAllOptionsButton = ShowAllOptionsButton;
var VoteButton = function VoteButton(_ref2) {
  var onPress = _ref2.onPress,
    option = _ref2.option;
  var _usePollContext7 = (0, _contexts.usePollContext)(),
    message = _usePollContext7.message,
    poll = _usePollContext7.poll;
  var _usePollState7 = (0, _usePollState9.usePollState)(),
    isClosed = _usePollState7.isClosed,
    ownVotesByOptionId = _usePollState7.ownVotesByOptionId;
  var ownCapabilities = (0, _contexts.useOwnCapabilitiesContext)();
  var _useTheme6 = (0, _contexts.useTheme)(),
    _useTheme6$theme = _useTheme6.theme,
    _useTheme6$theme$colo = _useTheme6$theme.colors,
    accent_dark_blue = _useTheme6$theme$colo.accent_dark_blue,
    disabled = _useTheme6$theme$colo.disabled,
    _useTheme6$theme$poll = _useTheme6$theme.poll.message.option,
    voteButtonActive = _useTheme6$theme$poll.voteButtonActive,
    voteButtonContainer = _useTheme6$theme$poll.voteButtonContainer,
    voteButtonInactive = _useTheme6$theme$poll.voteButtonInactive;
  var toggleVote = (0, _react.useCallback)((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
    var _ownVotesByOptionId$o;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!ownVotesByOptionId[option.id]) {
            _context.next = 5;
            break;
          }
          _context.next = 3;
          return poll.removeVote((_ownVotesByOptionId$o = ownVotesByOptionId[option.id]) == null ? void 0 : _ownVotesByOptionId$o.id, message.id);
        case 3:
          _context.next = 7;
          break;
        case 5:
          _context.next = 7;
          return poll.castVote(option.id, message.id);
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })), [message.id, option.id, ownVotesByOptionId, poll]);
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        poll: poll
      });
      return;
    }
    toggleVote();
  }, [message, onPress, poll, toggleVote]);
  return ownCapabilities.castPollVote && !isClosed ? (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
    onPress: onPressHandler,
    style: [styles.voteContainer, {
      backgroundColor: ownVotesByOptionId[option.id] ? voteButtonActive || accent_dark_blue : 'transparent',
      borderColor: ownVotesByOptionId[option.id] ? voteButtonActive || accent_dark_blue : voteButtonInactive || disabled
    }, voteButtonContainer],
    children: ownVotesByOptionId[option.id] ? (0, _jsxRuntime.jsx)(_icons.Check, {
      height: 15,
      pathFill: "white",
      width: 20
    }) : null
  }) : null;
};
exports.VoteButton = VoteButton;
var ShowAllVotesButton = function ShowAllVotesButton(props) {
  var _useTranslationContex8 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex8.t;
  var _usePollContext8 = (0, _contexts.usePollContext)(),
    message = _usePollContext8.message,
    poll = _usePollContext8.poll;
  var _usePollState8 = (0, _usePollState9.usePollState)(),
    voteCountsByOption = _usePollState8.voteCountsByOption;
  var ownCapabilities = (0, _contexts.useOwnCapabilitiesContext)();
  var _useState13 = (0, _react.useState)(false),
    _useState14 = (0, _slicedToArray2["default"])(_useState13, 2),
    showAllVotes = _useState14[0],
    setShowAllVotes = _useState14[1];
  var onPress = props.onPress,
    option = props.option;
  var onPressHandler = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress({
        message: message,
        option: option,
        poll: poll
      });
      return;
    }
    setShowAllVotes(true);
  }, [message, onPress, option, poll]);
  var _useTheme7 = (0, _contexts.useTheme)(),
    white = _useTheme7.theme.colors.white;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [ownCapabilities.queryPollVotes && voteCountsByOption && (voteCountsByOption == null ? void 0 : voteCountsByOption[option.id]) > 5 ? (0, _jsxRuntime.jsx)(GenericPollButton, {
      onPress: onPressHandler,
      title: t('Show All')
    }) : null, showAllVotes ? (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      animationType: "fade",
      onRequestClose: function onRequestClose() {
        return setShowAllVotes(false);
      },
      visible: showAllVotes,
      children: (0, _jsxRuntime.jsxs)(_reactNative.SafeAreaView, {
        style: {
          backgroundColor: white,
          flex: 1
        },
        children: [(0, _jsxRuntime.jsx)(_PollModalHeader.PollModalHeader, {
          onPress: function onPress() {
            return setShowAllVotes(false);
          },
          title: option.text
        }), (0, _jsxRuntime.jsx)(_PollResults.PollOptionFullResults, {
          message: message,
          option: option,
          poll: poll
        })]
      })
    }) : null]
  });
};
exports.ShowAllVotesButton = ShowAllVotesButton;
var styles = _reactNative.StyleSheet.create({
  answerListAddCommentContainer: {
    alignItems: 'center',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 18
  },
  container: {
    alignItems: 'center',
    marginHorizontal: 16,
    paddingVertical: 11
  },
  text: {
    fontSize: 16
  },
  voteContainer: {
    alignItems: 'center',
    borderRadius: 18,
    borderWidth: 1,
    height: 18,
    justifyContent: 'center',
    width: 18
  }
});
//# sourceMappingURL=Button.js.map