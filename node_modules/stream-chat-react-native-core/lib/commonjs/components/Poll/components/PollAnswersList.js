var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PollAnswersListContent = exports.PollAnswersList = exports.PollAnswerListItem = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _streamChat = require("stream-chat");
var _Button = require("./Button");
var _contexts = require("../../../contexts");
var _getDateString = require("../../../utils/i18n/getDateString");
var _Avatar = require("../../Avatar/Avatar");
var _usePollAnswersPagination = require("../hooks/usePollAnswersPagination");
var _usePollState2 = require("../hooks/usePollState");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/components/PollAnswersList.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var PollAnswerListItem = function PollAnswerListItem(_ref) {
  var _answer$user, _answer$user2, _answer$user3;
  var answer = _ref.answer;
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t,
    tDateTimeParser = _useTranslationContex.tDateTimeParser;
  var _usePollState = (0, _usePollState2.usePollState)(),
    votingVisibility = _usePollState.votingVisibility;
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    bg_user = _useTheme$theme$color.bg_user,
    black = _useTheme$theme$color.black,
    itemStyle = _useTheme$theme.poll.answersList.item;
  var dateString = (0, _react.useMemo)(function () {
    return (0, _getDateString.getDateString)({
      date: answer.updated_at,
      t: t,
      tDateTimeParser: tDateTimeParser,
      timestampTranslationKey: 'timestamp/PollVote'
    });
  }, [answer.updated_at, t, tDateTimeParser]);
  var isAnonymous = (0, _react.useMemo)(function () {
    return votingVisibility === _streamChat.VotingVisibility.anonymous;
  }, [votingVisibility]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.listItemContainer, {
      backgroundColor: bg_user
    }, itemStyle.container],
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.listItemAnswerText, {
        color: black
      }, itemStyle.answerText],
      children: answer.answer_text
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.listItemInfoContainer, itemStyle.infoContainer],
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.listItemUserInfoContainer, itemStyle.userInfoContainer],
        children: [!isAnonymous && (_answer$user = answer.user) != null && _answer$user.image ? (0, _jsxRuntime.jsx)(_Avatar.Avatar, {
          image: (_answer$user2 = answer.user) == null ? void 0 : _answer$user2.image,
          size: 20
        }) : null, (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            color: black,
            fontSize: 14,
            marginLeft: 2
          },
          children: isAnonymous ? t('Anonymous') : (_answer$user3 = answer.user) == null ? void 0 : _answer$user3.name
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          color: black
        },
        children: dateString
      })]
    })]
  });
};
exports.PollAnswerListItem = PollAnswerListItem;
var PollAnswerListItemComponent = function PollAnswerListItemComponent(_ref2) {
  var item = _ref2.item;
  return (0, _jsxRuntime.jsx)(PollAnswerListItem, {
    answer: item
  });
};
var PollAnswersListContent = function PollAnswersListContent(_ref3) {
  var additionalFlatListProps = _ref3.additionalFlatListProps;
  var _usePollAnswersPagina = (0, _usePollAnswersPagination.usePollAnswersPagination)(),
    hasNextPage = _usePollAnswersPagina.hasNextPage,
    loadMore = _usePollAnswersPagina.loadMore,
    pollAnswers = _usePollAnswersPagina.pollAnswers;
  var _useTheme2 = (0, _contexts.useTheme)(),
    _useTheme2$theme = _useTheme2.theme,
    white = _useTheme2$theme.colors.white,
    container = _useTheme2$theme.poll.answersList.container;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: white
    }, container],
    children: [(0, _jsxRuntime.jsx)(_reactNative.FlatList, Object.assign({
      data: pollAnswers,
      keyExtractor: function keyExtractor(item) {
        return "poll_answer_".concat(item.id);
      },
      onEndReached: function onEndReached() {
        return hasNextPage && loadMore();
      },
      renderItem: PollAnswerListItemComponent
    }, additionalFlatListProps)), (0, _jsxRuntime.jsx)(_Button.AnswerListAddCommentButton, {})]
  });
};
exports.PollAnswersListContent = PollAnswersListContent;
var PollAnswersList = function PollAnswersList(_ref4) {
  var additionalFlatListProps = _ref4.additionalFlatListProps,
    message = _ref4.message,
    poll = _ref4.poll,
    PollAnswersListOverride = _ref4.PollAnswersListContent;
  return (0, _jsxRuntime.jsx)(_contexts.PollContextProvider, {
    value: {
      message: message,
      poll: poll
    },
    children: PollAnswersListOverride ? (0, _jsxRuntime.jsx)(PollAnswersListOverride, {}) : (0, _jsxRuntime.jsx)(PollAnswersListContent, {
      additionalFlatListProps: additionalFlatListProps
    })
  });
};
exports.PollAnswersList = PollAnswersList;
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    margin: 16
  },
  listItemAnswerText: {
    fontSize: 16,
    fontWeight: '500'
  },
  listItemContainer: {
    borderRadius: 12,
    marginBottom: 8,
    paddingBottom: 20,
    paddingHorizontal: 16,
    paddingTop: 12
  },
  listItemInfoContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 24
  },
  listItemUserInfoContainer: {
    alignItems: 'center',
    flexDirection: 'row'
  }
});
//# sourceMappingURL=PollAnswersList.js.map