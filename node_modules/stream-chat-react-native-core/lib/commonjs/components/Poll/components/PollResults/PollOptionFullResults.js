var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PollOptionFullResultsItem = exports.PollOptionFullResultsContent = exports.PollOptionFullResults = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _PollResultItem = require("./PollResultItem");
var _contexts = require("../../../../contexts");
var _usePollOptionVotesPagination = require("../../hooks/usePollOptionVotesPagination");
var _usePollState2 = require("../../hooks/usePollState");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/components/PollResults/PollOptionFullResults.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var PollOptionFullResultsItem = function PollOptionFullResultsItem(_ref) {
  var item = _ref.item;
  return (0, _jsxRuntime.jsx)(_PollResultItem.PollVote, {
    vote: item
  });
};
exports.PollOptionFullResultsItem = PollOptionFullResultsItem;
var PollOptionFullResultsContent = function PollOptionFullResultsContent(_ref2) {
  var additionalFlatListProps = _ref2.additionalFlatListProps,
    option = _ref2.option;
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t;
  var _usePollOptionVotesPa = (0, _usePollOptionVotesPagination.usePollOptionVotesPagination)({
      option: option
    }),
    hasNextPage = _usePollOptionVotesPa.hasNextPage,
    loadMore = _usePollOptionVotesPa.loadMore,
    votes = _usePollOptionVotesPa.votes;
  var _usePollState = (0, _usePollState2.usePollState)(),
    voteCountsByOption = _usePollState.voteCountsByOption;
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    bg_user = _useTheme$theme$color.bg_user,
    black = _useTheme$theme$color.black,
    white = _useTheme$theme$color.white,
    _useTheme$theme$poll$ = _useTheme$theme.poll.fullResults,
    container = _useTheme$theme$poll$.container,
    contentContainer = _useTheme$theme$poll$.contentContainer,
    headerContainer = _useTheme$theme$poll$.headerContainer,
    headerText = _useTheme$theme$poll$.headerText;
  var PollOptionFullResultsHeader = (0, _react.useCallback)(function () {
    var _voteCountsByOption$o;
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.headerContainer, headerContainer],
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.headerText, {
          color: black
        }, headerText],
        children: t('{{count}} votes', {
          count: (_voteCountsByOption$o = voteCountsByOption[option.id]) != null ? _voteCountsByOption$o : 0
        })
      })
    });
  }, [black, headerContainer, headerText, option.id, t, voteCountsByOption]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: white
    }, container],
    children: (0, _jsxRuntime.jsx)(_reactNative.FlatList, Object.assign({
      contentContainerStyle: [styles.contentContainer, {
        backgroundColor: bg_user
      }, contentContainer],
      data: votes,
      keyExtractor: function keyExtractor(item) {
        return "option_full_results_".concat(item.id);
      },
      ListHeaderComponent: PollOptionFullResultsHeader,
      onEndReached: function onEndReached() {
        return hasNextPage && loadMore();
      },
      renderItem: PollOptionFullResultsItem
    }, additionalFlatListProps))
  });
};
exports.PollOptionFullResultsContent = PollOptionFullResultsContent;
var PollOptionFullResults = function PollOptionFullResults(_ref3) {
  var additionalFlatListProps = _ref3.additionalFlatListProps,
    message = _ref3.message,
    option = _ref3.option,
    poll = _ref3.poll,
    PollOptionFullResultsContentOverride = _ref3.PollOptionFullResultsContent;
  return (0, _jsxRuntime.jsx)(_contexts.PollContextProvider, {
    value: {
      message: message,
      poll: poll
    },
    children: PollOptionFullResultsContentOverride ? (0, _jsxRuntime.jsx)(PollOptionFullResultsContentOverride, {
      option: option
    }) : (0, _jsxRuntime.jsx)(PollOptionFullResultsContent, {
      additionalFlatListProps: additionalFlatListProps,
      option: option
    })
  });
};
exports.PollOptionFullResults = PollOptionFullResults;
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  contentContainer: {
    borderRadius: 12,
    marginBottom: 8,
    marginHorizontal: 16,
    marginTop: 16,
    paddingHorizontal: 16,
    paddingVertical: 12
  },
  headerContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginBottom: 8
  },
  headerText: {
    fontSize: 16,
    marginLeft: 16
  }
});
//# sourceMappingURL=PollOptionFullResults.js.map