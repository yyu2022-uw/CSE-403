var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PollInputDialog = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _contexts = require("../../../contexts");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/components/PollInputDialog.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var PollInputDialog = function PollInputDialog(_ref) {
  var closeDialog = _ref.closeDialog,
    _ref$initialValue = _ref.initialValue,
    initialValue = _ref$initialValue === void 0 ? '' : _ref$initialValue,
    onSubmit = _ref.onSubmit,
    title = _ref.title,
    visible = _ref.visible;
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t;
  var _useState = (0, _react.useState)(initialValue),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    dialogInput = _useState2[0],
    setDialogInput = _useState2[1];
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_dark_blue = _useTheme$theme$color.accent_dark_blue,
    black = _useTheme$theme$color.black,
    white = _useTheme$theme$color.white,
    _useTheme$theme$poll$ = _useTheme$theme.poll.inputDialog,
    button = _useTheme$theme$poll$.button,
    buttonContainer = _useTheme$theme$poll$.buttonContainer,
    container = _useTheme$theme$poll$.container,
    input = _useTheme$theme$poll$.input,
    titleStyle = _useTheme$theme$poll$.title,
    transparentContainer = _useTheme$theme$poll$.transparentContainer;
  return (0, _jsxRuntime.jsx)(_reactNative.Modal, {
    animationType: "fade",
    onRequestClose: closeDialog,
    transparent: true,
    visible: visible,
    children: (0, _jsxRuntime.jsx)(_reactNative.KeyboardAvoidingView, {
      behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : 'height',
      style: [styles.transparentContainer, transparentContainer],
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.container, {
          backgroundColor: white
        }, container],
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.title, {
            color: black
          }, titleStyle],
          children: title
        }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
          autoFocus: true,
          onChangeText: setDialogInput,
          placeholder: t('Ask a question'),
          style: [styles.input, {
            color: black
          }, input],
          value: dialogInput
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.buttonContainer, buttonContainer],
          children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            onPress: closeDialog,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.button, {
                color: accent_dark_blue
              }, button],
              children: t('Cancel')
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            onPress: function onPress() {
              onSubmit(dialogInput);
              closeDialog();
            },
            style: {
              marginLeft: 32
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.button, {
                color: accent_dark_blue
              }, button],
              children: t('SEND')
            })
          })]
        })]
      })
    })
  });
};
exports.PollInputDialog = PollInputDialog;
var styles = _reactNative.StyleSheet.create({
  button: {
    fontSize: 16,
    fontWeight: '500'
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginTop: 52
  },
  container: {
    backgroundColor: 'white',
    borderRadius: 16,
    paddingBottom: 20,
    paddingHorizontal: 16,
    paddingTop: 32,
    width: '80%'
  },
  input: {
    alignItems: 'center',
    borderColor: 'gray',
    borderRadius: 18,
    borderWidth: 1,
    fontSize: 16,
    height: 36,
    marginTop: 16,
    padding: 0,
    paddingHorizontal: 16
  },
  title: {
    fontSize: 17,
    fontWeight: '500',
    lineHeight: 20
  },
  transparentContainer: {
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.4)',
    flex: 1,
    justifyContent: 'center'
  }
});
//# sourceMappingURL=PollInputDialog.js.map