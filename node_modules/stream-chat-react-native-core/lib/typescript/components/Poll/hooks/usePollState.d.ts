import { APIResponse, CastVoteAPIResponse, PollAnswer, PollOption, PollVote, UpdatePollAPIResponse, UserResponse, VotingVisibility } from 'stream-chat';
import { DefaultStreamChatGenerics } from '../../../types/types';
export type UsePollStateSelectorReturnType = {
    allowAnswers: boolean | undefined;
    allowUserSuggestedOptions: boolean | undefined;
    answersCount: number;
    createdBy: UserResponse | null;
    enforceUniqueVote: boolean;
    isClosed: boolean | undefined;
    latestVotesByOption: Record<string, PollVote[]>;
    maxVotedOptionIds: string[];
    maxVotesAllowed: number;
    name: string;
    options: PollOption[];
    ownAnswer: PollAnswer | undefined;
    ownVotesByOptionId: Record<string, PollVote>;
    voteCountsByOption: Record<string, number>;
    votingVisibility: VotingVisibility | undefined;
};
export type UsePollStateReturnType<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = UsePollStateSelectorReturnType & {
    addComment: (answerText: string) => Promise<APIResponse & CastVoteAPIResponse<StreamChatGenerics>>;
    addOption: (optionText: string) => Promise<void>;
    endVote: () => Promise<APIResponse & UpdatePollAPIResponse<StreamChatGenerics>>;
};
export declare const usePollState: () => UsePollStateReturnType;
//# sourceMappingURL=usePollState.d.ts.map