var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PollHeader = exports.PollContent = exports.PollButtons = exports.Poll = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _components = require("./components");
var _usePollState3 = require("./hooks/usePollState");
var _contexts = require("../../contexts");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/Poll.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var PollButtons = function PollButtons() {
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(_components.ShowAllOptionsButton, {}), (0, _jsxRuntime.jsx)(_components.ShowAllCommentsButton, {}), (0, _jsxRuntime.jsx)(_components.SuggestOptionButton, {}), (0, _jsxRuntime.jsx)(_components.AddCommentButton, {}), (0, _jsxRuntime.jsx)(_components.ViewResultsButton, {}), (0, _jsxRuntime.jsx)(_components.EndVoteButton, {})]
  });
};
exports.PollButtons = PollButtons;
var PollHeader = function PollHeader() {
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t;
  var _usePollState = (0, _usePollState3.usePollState)(),
    enforceUniqueVote = _usePollState.enforceUniqueVote,
    isClosed = _usePollState.isClosed,
    maxVotesAllowed = _usePollState.maxVotesAllowed,
    name = _usePollState.name;
  var subtitle = (0, _react.useMemo)(function () {
    if (isClosed) return t('Vote ended');
    if (enforceUniqueVote) return t('Select one');
    if (maxVotesAllowed) return t('Select up to {{count}}', {
      count: maxVotesAllowed
    });
    return t('Select one or more');
  }, [isClosed, t, enforceUniqueVote, maxVotesAllowed]);
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    text_high_emphasis = _useTheme$theme$color.text_high_emphasis,
    text_low_emphasis = _useTheme$theme$color.text_low_emphasis,
    header = _useTheme$theme.poll.message.header;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.headerTitle, {
        color: text_high_emphasis
      }, header.title],
      children: name
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.headerSubtitle, {
        color: text_low_emphasis
      }, header.subtitle],
      children: subtitle
    })]
  });
};
exports.PollHeader = PollHeader;
var PollContent = function PollContent(_ref) {
  var _options$slice;
  var PollButtonsOverride = _ref.PollButtons,
    PollHeaderOverride = _ref.PollHeader;
  var _usePollState2 = (0, _usePollState3.usePollState)(),
    options = _usePollState2.options;
  var _useTheme2 = (0, _contexts.useTheme)(),
    _useTheme2$theme$poll = _useTheme2.theme.poll.message,
    container = _useTheme2$theme$poll.container,
    optionsWrapper = _useTheme2$theme$poll.optionsWrapper;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, container],
    children: [PollHeaderOverride ? (0, _jsxRuntime.jsx)(PollHeaderOverride, {}) : (0, _jsxRuntime.jsx)(PollHeader, {}), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.optionsWrapper, optionsWrapper],
      children: options == null ? void 0 : (_options$slice = options.slice(0, 10)) == null ? void 0 : _options$slice.map(function (option) {
        return (0, _jsxRuntime.jsx)(_components.PollOption, {
          option: option
        }, "message_poll_option_".concat(option.id));
      })
    }), PollButtonsOverride ? (0, _jsxRuntime.jsx)(PollButtonsOverride, {}) : (0, _jsxRuntime.jsx)(PollButtons, {})]
  });
};
exports.PollContent = PollContent;
var Poll = function Poll(_ref2) {
  var message = _ref2.message,
    poll = _ref2.poll,
    PollContentOverride = _ref2.PollContent;
  return (0, _jsxRuntime.jsx)(_contexts.PollContextProvider, {
    value: {
      message: message,
      poll: poll
    },
    children: PollContentOverride ? (0, _jsxRuntime.jsx)(PollContentOverride, {}) : (0, _jsxRuntime.jsx)(PollContent, {})
  });
};
exports.Poll = Poll;
var styles = _reactNative.StyleSheet.create({
  container: {
    padding: 15,
    width: 270
  },
  headerSubtitle: {
    fontSize: 12,
    marginTop: 4
  },
  headerTitle: {
    fontSize: 16,
    fontWeight: '500'
  },
  optionsWrapper: {
    marginTop: 12
  }
});
//# sourceMappingURL=Poll.js.map