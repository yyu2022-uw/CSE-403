var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreatePollOptions = exports.CreatePollOption = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _contexts = require("../../../contexts");
var _icons = require("../../../icons");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/components/CreatePollOptions.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var OPTION_HEIGHT = 71;
var CreatePollOption = function CreatePollOption(_ref) {
  var boundaries = _ref.boundaries,
    currentOptionPositions = _ref.currentOptionPositions,
    draggedItemId = _ref.draggedItemId,
    handleChangeText = _ref.handleChangeText,
    hasDuplicate = _ref.hasDuplicate,
    index = _ref.index,
    isDragging = _ref.isDragging,
    option = _ref.option;
  var _useTranslationContex = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex.t;
  var _useCreatePollContent = (0, _contexts.useCreatePollContentContext)(),
    _useCreatePollContent2 = _useCreatePollContent.createPollOptionHeight,
    createPollOptionHeight = _useCreatePollContent2 === void 0 ? OPTION_HEIGHT : _useCreatePollContent2;
  var top = (0, _reactNativeReanimated.useSharedValue)(index * createPollOptionHeight);
  var isDraggingDerived = (0, _reactNativeReanimated.useDerivedValue)(function () {
    return isDragging.value;
  });
  var draggedItemIdDerived = (0, _reactNativeReanimated.useDerivedValue)(function () {
    return draggedItemId.value;
  });
  var isCurrentDraggingItem = (0, _reactNativeReanimated.useDerivedValue)(function () {
    return isDraggingDerived.value && draggedItemIdDerived.value === index;
  });
  var animatedStyles = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      top: top.value,
      transform: [{
        scale: isCurrentDraggingItem.value ? (0, _reactNativeReanimated.interpolate)(isDraggingDerived.value, [0, 1], [1, 1.025]) : (0, _reactNativeReanimated.interpolate)(isDraggingDerived.value, [0, 1], [1, 0.98])
      }]
    };
  });
  var currentOptionPositionsDerived = (0, _reactNativeReanimated.useDerivedValue)(function () {
    return currentOptionPositions.value;
  });
  var newIndex = (0, _reactNativeReanimated.useSharedValue)(null);
  var currentIndex = (0, _reactNativeReanimated.useSharedValue)(null);
  (0, _reactNativeReanimated.useAnimatedReaction)(function () {
    return currentOptionPositionsDerived.value.positionCache[index].updatedIndex;
  }, function (currentValue, previousValue) {
    if (currentValue !== previousValue) {
      top.value = (0, _reactNativeReanimated.withSpring)(currentOptionPositionsDerived.value.positionCache[index].updatedIndex * createPollOptionHeight);
    }
  });
  var gesture = _reactNativeGestureHandler.Gesture.Pan().onStart(function () {
    isDragging.value = (0, _reactNativeReanimated.withSpring)(1);
    draggedItemId.value = index;
    currentIndex.value = currentOptionPositionsDerived.value.positionCache[index].updatedIndex;
  }).onUpdate(function (e) {
    var _currentOptionPositio = currentOptionPositionsDerived.value,
      inverseIndexCache = _currentOptionPositio.inverseIndexCache,
      positionCache = _currentOptionPositio.positionCache;
    if (draggedItemIdDerived.value === null || currentIndex.value === null) {
      return;
    }
    var newTop = positionCache[draggedItemIdDerived.value].updatedTop + e.translationY;
    if (newTop < boundaries.minBound - 10 || newTop > boundaries.maxBound + 10) {
      return;
    }
    top.value = newTop;
    newIndex.value = Math.floor((newTop + createPollOptionHeight / 2) / createPollOptionHeight);
    if (newIndex.value !== currentIndex.value) {
      var newIndexItemKey = inverseIndexCache[newIndex.value];
      var currentDragIndexItemKey = inverseIndexCache[currentIndex.value];
      if (newIndexItemKey !== undefined && currentDragIndexItemKey !== undefined) {
        var _Object$assign, _Object$assign2;
        currentOptionPositions.value = {
          inverseIndexCache: Object.assign({}, inverseIndexCache, (_Object$assign = {}, (0, _defineProperty2["default"])(_Object$assign, newIndex.value, currentDragIndexItemKey), (0, _defineProperty2["default"])(_Object$assign, currentIndex.value, newIndexItemKey), _Object$assign)),
          positionCache: Object.assign({}, positionCache, (_Object$assign2 = {}, (0, _defineProperty2["default"])(_Object$assign2, currentDragIndexItemKey, Object.assign({}, positionCache[currentDragIndexItemKey], {
            updatedIndex: newIndex.value
          })), (0, _defineProperty2["default"])(_Object$assign2, newIndexItemKey, Object.assign({}, positionCache[newIndexItemKey], {
            updatedIndex: currentIndex.value,
            updatedTop: currentIndex.value * createPollOptionHeight
          })), _Object$assign2))
        };
        currentIndex.value = newIndex.value;
      }
    }
  }).onEnd(function () {
    var _currentOptionPositio2 = currentOptionPositionsDerived.value,
      inverseIndexCache = _currentOptionPositio2.inverseIndexCache,
      positionCache = _currentOptionPositio2.positionCache;
    if (currentIndex.value === null || newIndex.value === null) {
      return;
    }
    top.value = (0, _reactNativeReanimated.withSpring)(newIndex.value * createPollOptionHeight);
    var currentDragIndexItemKey = inverseIndexCache[currentIndex.value];
    if (currentDragIndexItemKey !== undefined) {
      currentOptionPositions.value = Object.assign({}, currentOptionPositionsDerived.value, {
        positionCache: Object.assign({}, positionCache, (0, _defineProperty2["default"])({}, currentDragIndexItemKey, Object.assign({}, positionCache[currentDragIndexItemKey], {
          updatedTop: newIndex.value * createPollOptionHeight
        })))
      });
    }
    isDragging.value = (0, _reactNativeReanimated.withDelay)(200, (0, _reactNativeReanimated.withSpring)(0));
  });
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_error = _useTheme$theme$color.accent_error,
    bg_user = _useTheme$theme$color.bg_user,
    black = _useTheme$theme$color.black,
    text_low_emphasis = _useTheme$theme$color.text_low_emphasis,
    optionStyle = _useTheme$theme.poll.createContent.pollOptions.optionStyle;
  return (0, _jsxRuntime.jsxs)(_reactNativeReanimated["default"].View, {
    style: [styles.optionWrapper, optionStyle.wrapper, {
      backgroundColor: bg_user,
      borderColor: hasDuplicate ? accent_error : bg_user,
      position: 'absolute',
      width: '100%'
    }, animatedStyles],
    children: [hasDuplicate ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.optionValidationError, {
        color: accent_error
      }, optionStyle.validationErrorText],
      children: t('This is already an option')
    }) : null, (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
      onChangeText: function onChangeText(newText) {
        return handleChangeText(newText, index);
      },
      placeholder: t('Option'),
      style: [styles.optionInput, {
        color: black
      }, optionStyle.input],
      value: option.text
    }), (0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureDetector, {
      gesture: gesture,
      children: (0, _jsxRuntime.jsx)(_reactNativeReanimated["default"].View, {
        children: (0, _jsxRuntime.jsx)(_icons.DragHandle, {
          pathFill: text_low_emphasis
        })
      })
    })]
  });
};
exports.CreatePollOption = CreatePollOption;
var MemoizedCreatePollOption = _react["default"].memo(CreatePollOption);
var CreatePollOptions = function CreatePollOptions(props) {
  var _useTranslationContex2 = (0, _contexts.useTranslationContext)(),
    t = _useTranslationContex2.t;
  var _useCreatePollContent3 = (0, _contexts.useCreatePollContentContext)(),
    _useCreatePollContent4 = _useCreatePollContent3.createPollOptionHeight,
    createPollOptionHeight = _useCreatePollContent4 === void 0 ? OPTION_HEIGHT : _useCreatePollContent4;
  var currentOptionPositions = props.currentOptionPositions,
    _props$duplicates = props.duplicates,
    duplicates = _props$duplicates === void 0 ? [] : _props$duplicates,
    pollOptions = props.pollOptions,
    setPollOptions = props.setPollOptions;
  var updateOption = (0, _react.useCallback)(function (newText, index) {
    setPollOptions(function (prevOptions) {
      return prevOptions.map(function (option, idx) {
        return idx === index ? Object.assign({}, option, {
          text: newText
        }) : option;
      });
    });
  }, [setPollOptions]);
  var isDragging = (0, _reactNativeReanimated.useSharedValue)(0);
  var draggedItemId = (0, _reactNativeReanimated.useSharedValue)(null);
  var boundaries = (0, _react.useMemo)(function () {
    return {
      maxBound: (pollOptions.length - 1) * createPollOptionHeight,
      minBound: 0
    };
  }, [createPollOptionHeight, pollOptions.length]);
  var _useTheme2 = (0, _contexts.useTheme)(),
    _useTheme2$theme = _useTheme2.theme,
    _useTheme2$theme$colo = _useTheme2$theme.colors,
    bg_user = _useTheme2$theme$colo.bg_user,
    black = _useTheme2$theme$colo.black,
    _useTheme2$theme$poll = _useTheme2$theme.poll.createContent.pollOptions,
    addOption = _useTheme2$theme$poll.addOption,
    container = _useTheme2$theme$poll.container,
    title = _useTheme2$theme$poll.title;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, container],
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.text, {
        color: black
      }, title],
      children: t('Options')
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: {
        height: createPollOptionHeight * pollOptions.length
      },
      children: pollOptions.map(function (option, index) {
        return (0, _jsxRuntime.jsx)(MemoizedCreatePollOption, {
          boundaries: boundaries,
          currentOptionPositions: currentOptionPositions,
          draggedItemId: draggedItemId,
          handleChangeText: updateOption,
          hasDuplicate: duplicates.includes(option.text),
          index: index,
          isDragging: isDragging,
          option: option
        }, index);
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: function onPress() {
        var newIndex = pollOptions.length;
        currentOptionPositions.value = {
          inverseIndexCache: Object.assign({}, currentOptionPositions.value.inverseIndexCache, (0, _defineProperty2["default"])({}, newIndex, newIndex)),
          positionCache: Object.assign({}, currentOptionPositions.value.positionCache, (0, _defineProperty2["default"])({}, newIndex, {
            updatedIndex: newIndex,
            updatedTop: newIndex * createPollOptionHeight
          }))
        };
        setPollOptions([].concat((0, _toConsumableArray2["default"])(pollOptions), [{
          text: ''
        }]));
      },
      style: [styles.addOptionWrapper, {
        backgroundColor: bg_user
      }, addOption.wrapper],
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.text, {
          color: black
        }, addOption.text],
        children: t('Add an option')
      })
    })]
  });
};
exports.CreatePollOptions = CreatePollOptions;
var styles = _reactNative.StyleSheet.create({
  addOptionWrapper: {
    borderRadius: 12,
    marginTop: 8,
    paddingHorizontal: 16,
    paddingVertical: 18
  },
  container: {
    marginVertical: 16
  },
  optionInput: {
    flex: 1,
    fontSize: 16,
    paddingRight: 4,
    paddingVertical: 0
  },
  optionValidationError: {
    fontSize: 12,
    left: 16,
    position: 'absolute',
    top: 4
  },
  optionWrapper: {
    alignItems: 'center',
    borderRadius: 12,
    borderWidth: 1,
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 8,
    paddingHorizontal: 16,
    paddingVertical: 18
  },
  text: {
    fontSize: 16
  }
});
//# sourceMappingURL=CreatePollOptions.js.map