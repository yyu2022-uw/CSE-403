var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PollResultsContent = exports.PollResults = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _PollResultItem = require("./PollResultItem");
var _contexts = require("../../../../contexts");
var _usePollState2 = require("../../hooks/usePollState");
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Poll/components/PollResults/PollResults.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var PollResultsContent = function PollResultsContent(_ref) {
  var additionalScrollViewProps = _ref.additionalScrollViewProps;
  var _usePollState = (0, _usePollState2.usePollState)(),
    name = _usePollState.name,
    options = _usePollState.options,
    voteCountsByOption = _usePollState.voteCountsByOption;
  var sortedOptions = (0, _react.useMemo)(function () {
    return (0, _toConsumableArray2["default"])(options).sort(function (a, b) {
      var _voteCountsByOption$b, _voteCountsByOption$a;
      return ((_voteCountsByOption$b = voteCountsByOption[b.id]) != null ? _voteCountsByOption$b : 0) - ((_voteCountsByOption$a = voteCountsByOption[a.id]) != null ? _voteCountsByOption$a : 0);
    });
  }, [voteCountsByOption, options]);
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    bg_user = _useTheme$theme$color.bg_user,
    black = _useTheme$theme$color.black,
    white = _useTheme$theme$color.white,
    _useTheme$theme$poll$ = _useTheme$theme.poll.results,
    container = _useTheme$theme$poll$.container,
    scrollView = _useTheme$theme$poll$.scrollView,
    title = _useTheme$theme$poll$.title;
  return (0, _jsxRuntime.jsxs)(_reactNativeGestureHandler.ScrollView, Object.assign({
    style: [styles.scrollView, {
      backgroundColor: white
    }, scrollView]
  }, additionalScrollViewProps, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.container, {
        backgroundColor: bg_user
      }, container],
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.title, {
          color: black
        }, title],
        children: name
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: {
        marginTop: 16
      },
      children: sortedOptions.map(function (option) {
        return (0, _jsxRuntime.jsx)(_PollResultItem.PollResultsItem, {
          option: option
        }, "results_".concat(option.id));
      })
    })]
  }));
};
exports.PollResultsContent = PollResultsContent;
var PollResults = function PollResults(_ref2) {
  var additionalScrollViewProps = _ref2.additionalScrollViewProps,
    message = _ref2.message,
    poll = _ref2.poll,
    PollResultsContentOverride = _ref2.PollResultsContent;
  return (0, _jsxRuntime.jsx)(_contexts.PollContextProvider, {
    value: {
      message: message,
      poll: poll
    },
    children: PollResultsContentOverride ? (0, _jsxRuntime.jsx)(PollResultsContentOverride, {}) : (0, _jsxRuntime.jsx)(PollResultsContent, {
      additionalScrollViewProps: additionalScrollViewProps
    })
  });
};
exports.PollResults = PollResults;
var styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 12,
    marginTop: 16,
    paddingHorizontal: 16,
    paddingVertical: 18
  },
  scrollView: {
    flex: 1,
    marginHorizontal: 16
  },
  title: {
    fontSize: 16,
    fontWeight: '500'
  }
});
//# sourceMappingURL=PollResults.js.map