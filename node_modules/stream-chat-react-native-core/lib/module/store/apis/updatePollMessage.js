var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updatePollMessage = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _streamChat = require("stream-chat");
var _mapPollToStorable = require("../mappers/mapPollToStorable");
var _mapStorableToPoll = require("../mappers/mapStorableToPoll");
var _QuickSqliteClient = require("../QuickSqliteClient");
var _createSelectQuery = require("../sqlite-utils/createSelectQuery");
var _createUpdateQuery = require("../sqlite-utils/createUpdateQuery");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var updatePollMessage = function updatePollMessage(_ref) {
  var eventType = _ref.eventType,
    _ref$flush = _ref.flush,
    flush = _ref$flush === void 0 ? true : _ref$flush,
    poll = _ref.poll,
    poll_vote = _ref.poll_vote,
    userID = _ref.userID;
  var queries = [];
  var pollsFromDB = _QuickSqliteClient.QuickSqliteClient.executeSql.apply(null, (0, _createSelectQuery.createSelectQuery)('poll', ['*'], {
    id: poll.id
  }));
  var _iterator = _createForOfIteratorHelper(pollsFromDB),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _poll_vote$user;
      var pollFromDB = _step.value;
      var serializedPoll = (0, _mapStorableToPoll.mapStorableToPoll)(pollFromDB);
      var _serializedPoll$lates = serializedPoll.latest_answers,
        latest_answers = _serializedPoll$lates === void 0 ? [] : _serializedPoll$lates,
        _serializedPoll$own_v = serializedPoll.own_votes,
        own_votes = _serializedPoll$own_v === void 0 ? [] : _serializedPoll$own_v;
      var newOwnVotes = own_votes;
      if (poll_vote && ((_poll_vote$user = poll_vote.user) == null ? void 0 : _poll_vote$user.id) === userID) {
        newOwnVotes = eventType === 'poll.vote_removed' ? newOwnVotes.filter(function (vote) {
          return vote.id !== poll_vote.id;
        }) : [poll_vote].concat((0, _toConsumableArray2["default"])(newOwnVotes.filter(function (vote) {
          return vote.id !== poll_vote.id;
        })));
      }
      var newLatestAnswers = latest_answers;
      if (poll_vote && (0, _streamChat.isVoteAnswer)(poll_vote)) {
        newLatestAnswers = eventType === 'poll.vote_removed' ? newLatestAnswers.filter(function (answer) {
          return answer.id !== (poll_vote == null ? void 0 : poll_vote.id);
        }) : [poll_vote].concat((0, _toConsumableArray2["default"])(newLatestAnswers.filter(function (answer) {
          return answer.id !== (poll_vote == null ? void 0 : poll_vote.id);
        })));
      }
      var storablePoll = (0, _mapPollToStorable.mapPollToStorable)(Object.assign({}, poll, {
        latest_answers: newLatestAnswers,
        own_votes: newOwnVotes
      }));
      queries.push((0, _createUpdateQuery.createUpdateQuery)('poll', storablePoll, {
        id: poll.id
      }));
      _QuickSqliteClient.QuickSqliteClient.logger == null ? void 0 : _QuickSqliteClient.QuickSqliteClient.logger('info', 'updatePoll', {
        poll: storablePoll
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (flush) {
    _QuickSqliteClient.QuickSqliteClient.executeSqlBatch(queries);
  }
  return queries;
};
exports.updatePollMessage = updatePollMessage;
//# sourceMappingURL=updatePollMessage.js.map