{"version":3,"sources":["FlatList.android.tsx"],"names":["ScrollViewManager","NativeModules","MvcpScrollViewManager","React","forwardRef","props","forwardedRef","flRef","isMvcpEnabledNative","handle","enableMvcpRetriesCount","isMvcpPropPresentRef","maintainVisibleContentPosition","autoscrollToTopThreshold","Number","MAX_SAFE_INTEGER","minIndexForVisible","retryTimeoutId","debounceTimeoutId","disableMvcpRef","current","disableMaintainVisibleContentPosition","enableMvcpWithRetriesRef","clearTimeout","setTimeout","Platform","OS","scrollableNode","getScrollableNode","_handle","enableMaintainVisibleContentPosition","error","propAutoscrollToTopThreshold","propMinIndexForVisible","hasMvcpChanged","refCallback","ref","disableMvcp"],"mappings":"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","sourcesContent":["import React, { MutableRefObject, useEffect, useRef } from 'react';\nimport { FlatList, FlatListProps, NativeModules, Platform } from 'react-native';\n\nexport const ScrollViewManager = NativeModules.MvcpScrollViewManager;\n\nexport default (React.forwardRef(\n  <T extends any>(\n    props: FlatListProps<T>,\n    forwardedRef:\n      | ((instance: FlatList<T> | null) => void)\n      | MutableRefObject<FlatList<T> | null>\n      | null\n  ) => {\n    const flRef = useRef<FlatList<T> | null>(null);\n    const isMvcpEnabledNative = useRef<boolean>(false);\n    const handle = useRef<number | null>(null);\n    const enableMvcpRetriesCount = useRef<number>(0);\n    const isMvcpPropPresentRef = useRef(!!props.maintainVisibleContentPosition);\n\n    const autoscrollToTopThreshold = useRef<number | null>(\n      props.maintainVisibleContentPosition?.autoscrollToTopThreshold ||\n        -Number.MAX_SAFE_INTEGER\n    );\n    const minIndexForVisible = useRef<number>(\n      props.maintainVisibleContentPosition?.minIndexForVisible || 1\n    );\n    const retryTimeoutId = useRef<NodeJS.Timeout>();\n    const debounceTimeoutId = useRef<NodeJS.Timeout>();\n    const disableMvcpRef = useRef(async () => {\n      isMvcpEnabledNative.current = false;\n      if (!handle?.current) {\n        return;\n      }\n      await ScrollViewManager.disableMaintainVisibleContentPosition(\n        handle.current\n      );\n    });\n    const enableMvcpWithRetriesRef = useRef(() => {\n      // debounce to wait till consecutive mvcp enabling\n      // this ensures that always previous handles are disabled first\n      if (debounceTimeoutId.current) {\n        clearTimeout(debounceTimeoutId.current);\n      }\n      debounceTimeoutId.current = setTimeout(async () => {\n        // disable any previous enabled handles\n        await disableMvcpRef.current();\n\n        if (\n          !flRef.current ||\n          !isMvcpPropPresentRef.current ||\n          isMvcpEnabledNative.current ||\n          Platform.OS !== 'android'\n        ) {\n          return;\n        }\n        const scrollableNode = flRef.current.getScrollableNode();\n\n        try {\n          const _handle: number = await ScrollViewManager.enableMaintainVisibleContentPosition(\n            scrollableNode,\n            autoscrollToTopThreshold.current,\n            minIndexForVisible.current\n          );\n          handle.current = _handle;\n        } catch (error: any) {\n          /**\n           * enableMaintainVisibleContentPosition from native module may throw IllegalViewOperationException,\n           * in case view is not ready yet. In that case, lets do a retry!! (max of 10 tries)\n           */\n          if (enableMvcpRetriesCount.current < 10) {\n            retryTimeoutId.current = setTimeout(\n              enableMvcpWithRetriesRef.current,\n              100\n            );\n            enableMvcpRetriesCount.current += 1;\n          }\n        }\n      }, 300);\n    });\n\n    useEffect(() => {\n      // when the mvcp prop changes\n      // enable natively again, if the prop has changed\n      const propAutoscrollToTopThreshold =\n        props.maintainVisibleContentPosition?.autoscrollToTopThreshold ||\n        -Number.MAX_SAFE_INTEGER;\n      const propMinIndexForVisible =\n        props.maintainVisibleContentPosition?.minIndexForVisible || 1;\n      const hasMvcpChanged =\n        autoscrollToTopThreshold.current !== propAutoscrollToTopThreshold ||\n        minIndexForVisible.current !== propMinIndexForVisible ||\n        isMvcpPropPresentRef.current !== !!props.maintainVisibleContentPosition;\n\n      if (hasMvcpChanged) {\n        enableMvcpRetriesCount.current = 0;\n        autoscrollToTopThreshold.current = propAutoscrollToTopThreshold;\n        minIndexForVisible.current = propMinIndexForVisible;\n        isMvcpPropPresentRef.current = !!props.maintainVisibleContentPosition;\n        enableMvcpWithRetriesRef.current();\n      }\n    }, [props.maintainVisibleContentPosition]);\n\n    const refCallback = useRef<(instance: FlatList<T> | null) => void>(\n      (ref) => {\n        flRef.current = ref;\n        enableMvcpWithRetriesRef.current();\n        if (typeof forwardedRef === 'function') {\n          forwardedRef(ref);\n        } else if (forwardedRef) {\n          forwardedRef.current = ref;\n        }\n      }\n    ).current;\n\n    useEffect(() => {\n      const disableMvcp = disableMvcpRef.current;\n      return () => {\n        // clean up the retry mechanism\n        if (debounceTimeoutId.current) {\n          clearTimeout(debounceTimeoutId.current);\n        }\n        // clean up any debounce\n        if (debounceTimeoutId.current) {\n          clearTimeout(debounceTimeoutId.current);\n        }\n        disableMvcp();\n      };\n    }, []);\n\n    return <FlatList<T> {...props} ref={refCallback} />;\n  }\n) as unknown) as typeof FlatList;\n"]}