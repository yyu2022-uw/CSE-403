{"version":3,"sources":["useMvcpTuner.ts"],"names":["MvcpScrollViewManager","NativeModules","useMvcpTuner","flRef","refReady","mvcp","extraData","autoscrollToTopThreshold","minIndexForVisible","cleanupPromise","enableMaintainVisibleContentPosition","Platform","OS","current","Number","MAX_SAFE_INTEGER","viewTag","then","handle","disableMaintainVisibleContentPosition"],"mappings":";;;;;;;AAAA;;AACA;;AAYO,MAAMA,qBAAqB,GAAGC,2BAAcD,qBAA5C;;;AAEA,MAAME,YAAY,GAAG,CAC1BC,KAD0B,EAE1BC,QAF0B,EAG1BC,IAH0B,EAI1BC,SAJ0B,KAKvB;AACH,QAAMC,wBAAwB,GAAG,oBAAjC;AACA,QAAMC,kBAAkB,GAAG,oBAA3B;AAEA,wBAAU,MAAM;AACd,QAAIC,cAAJ;;AACA,UAAMC,oCAAoC,GAAG,MAAY;AACvD,UAAI,CAACL,IAAD,IAASM,sBAASC,EAAT,KAAgB,SAAzB,IAAsC,EAACT,KAAD,aAACA,KAAD,eAACA,KAAK,CAAEU,OAAR,CAA1C,EAA2D;AACzD;AACD;;AAED,UACEN,wBAAwB,CAACM,OAAzB,KAAqCR,IAAI,CAACE,wBAA1C,IACAC,kBAAkB,CAACK,OAAnB,KAA+BR,IAAI,CAACG,kBAFtC,EAGE;AACA;AACA;AACD;;AAEDD,MAAAA,wBAAwB,CAACM,OAAzB,GACER,IAAI,CAACE,wBAAL,IAAiC,CAACO,MAAM,CAACC,gBAD3C;AAEAP,MAAAA,kBAAkB,CAACK,OAAnB,GAA6BR,IAAI,CAACG,kBAAL,IAA2B,CAAxD;AAEA,YAAMQ,OAAO,GAAG,iCAAeb,KAAK,CAACU,OAArB,CAAhB;AACAJ,MAAAA,cAAc,GAAGT,qBAAqB,CAACU,oCAAtB,CACfM,OADe,EAEfT,wBAAwB,CAACM,OAFV,EAGfL,kBAAkB,CAACK,OAHJ,CAAjB;AAKD,KAvBD;;AAyBAH,IAAAA,oCAAoC;AAEpC,WAAO,MAAM;AAAA;;AACX,UACEL,IAAI,IACJE,wBAAwB,CAACM,OAAzB,KAAqCR,IAAI,CAACE,wBAD1C,IAEAC,kBAAkB,CAACK,OAAnB,KAA+BR,IAAI,CAACG,kBAHtC,EAIE;AACA;AACA;AACD;;AAED,yBAAAC,cAAc,UAAd,0DAAgBQ,IAAhB,CAAsBC,MAAD,IAAY;AAC/BlB,QAAAA,qBAAqB,CAACmB,qCAAtB,CAA4DD,MAA5D;AACD,OAFD;AAGD,KAbD,CA7Bc,CA2Cd;AACD,GA5CD,EA4CG,CAACd,QAAD,EAAWE,SAAX,EAAsBD,IAAtB,CA5CH;AA6CD,CAtDM","sourcesContent":["import { MutableRefObject, useEffect, useRef } from 'react';\nimport {\n  NativeModules,\n  FlatList,\n  Platform,\n  findNodeHandle,\n} from 'react-native';\n\nexport type maintainVisibleContentPositionPropType = {\n  autoscrollToTopThreshold?: number | null;\n  minIndexForVisible: number;\n};\n\nexport const MvcpScrollViewManager = NativeModules.MvcpScrollViewManager;\n\nexport const useMvcpTuner = (\n  flRef: MutableRefObject<FlatList | undefined>,\n  refReady: boolean,\n  mvcp?: maintainVisibleContentPositionPropType,\n  extraData?: any\n) => {\n  const autoscrollToTopThreshold = useRef<number>();\n  const minIndexForVisible = useRef<number>();\n\n  useEffect(() => {\n    let cleanupPromise: Promise<number> | undefined;\n    const enableMaintainVisibleContentPosition = (): void => {\n      if (!mvcp || Platform.OS !== 'android' || !flRef?.current) {\n        return;\n      }\n\n      if (\n        autoscrollToTopThreshold.current === mvcp.autoscrollToTopThreshold &&\n        minIndexForVisible.current === mvcp.minIndexForVisible\n      ) {\n        // Don't do anythinig if the values haven't changed\n        return;\n      }\n\n      autoscrollToTopThreshold.current =\n        mvcp.autoscrollToTopThreshold || -Number.MAX_SAFE_INTEGER;\n      minIndexForVisible.current = mvcp.minIndexForVisible || 0;\n\n      const viewTag = findNodeHandle(flRef.current);\n      cleanupPromise = MvcpScrollViewManager.enableMaintainVisibleContentPosition(\n        viewTag,\n        autoscrollToTopThreshold.current,\n        minIndexForVisible.current\n      );\n    };\n\n    enableMaintainVisibleContentPosition();\n\n    return () => {\n      if (\n        mvcp &&\n        autoscrollToTopThreshold.current === mvcp.autoscrollToTopThreshold &&\n        minIndexForVisible.current === mvcp.minIndexForVisible\n      ) {\n        // Don't do anythinig if the values haven't changed\n        return;\n      }\n\n      cleanupPromise?.then((handle) => {\n        MvcpScrollViewManager.disableMaintainVisibleContentPosition(handle);\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [refReady, extraData, mvcp]);\n};\n"]}