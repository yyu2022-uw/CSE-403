{"version":3,"sources":["useMvcpTuner.ts"],"names":["useEffect","useRef","NativeModules","Platform","findNodeHandle","MvcpScrollViewManager","useMvcpTuner","flRef","refReady","mvcp","extraData","autoscrollToTopThreshold","minIndexForVisible","cleanupPromise","enableMaintainVisibleContentPosition","OS","current","Number","MAX_SAFE_INTEGER","viewTag","then","handle","disableMaintainVisibleContentPosition"],"mappings":"AAAA,SAA2BA,SAA3B,EAAsCC,MAAtC,QAAoD,OAApD;AACA,SACEC,aADF,EAGEC,QAHF,EAIEC,cAJF,QAKO,cALP;AAYA,OAAO,MAAMC,qBAAqB,GAAGH,aAAa,CAACG,qBAA5C;AAEP,OAAO,MAAMC,YAAY,GAAG,CAC1BC,KAD0B,EAE1BC,QAF0B,EAG1BC,IAH0B,EAI1BC,SAJ0B,KAKvB;AACH,QAAMC,wBAAwB,GAAGV,MAAM,EAAvC;AACA,QAAMW,kBAAkB,GAAGX,MAAM,EAAjC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,cAAJ;;AACA,UAAMC,oCAAoC,GAAG,MAAY;AACvD,UAAI,CAACL,IAAD,IAASN,QAAQ,CAACY,EAAT,KAAgB,SAAzB,IAAsC,EAACR,KAAD,aAACA,KAAD,eAACA,KAAK,CAAES,OAAR,CAA1C,EAA2D;AACzD;AACD;;AAED,UACEL,wBAAwB,CAACK,OAAzB,KAAqCP,IAAI,CAACE,wBAA1C,IACAC,kBAAkB,CAACI,OAAnB,KAA+BP,IAAI,CAACG,kBAFtC,EAGE;AACA;AACA;AACD;;AAEDD,MAAAA,wBAAwB,CAACK,OAAzB,GACEP,IAAI,CAACE,wBAAL,IAAiC,CAACM,MAAM,CAACC,gBAD3C;AAEAN,MAAAA,kBAAkB,CAACI,OAAnB,GAA6BP,IAAI,CAACG,kBAAL,IAA2B,CAAxD;AAEA,YAAMO,OAAO,GAAGf,cAAc,CAACG,KAAK,CAACS,OAAP,CAA9B;AACAH,MAAAA,cAAc,GAAGR,qBAAqB,CAACS,oCAAtB,CACfK,OADe,EAEfR,wBAAwB,CAACK,OAFV,EAGfJ,kBAAkB,CAACI,OAHJ,CAAjB;AAKD,KAvBD;;AAyBAF,IAAAA,oCAAoC;AAEpC,WAAO,MAAM;AAAA;;AACX,UACEL,IAAI,IACJE,wBAAwB,CAACK,OAAzB,KAAqCP,IAAI,CAACE,wBAD1C,IAEAC,kBAAkB,CAACI,OAAnB,KAA+BP,IAAI,CAACG,kBAHtC,EAIE;AACA;AACA;AACD;;AAED,yBAAAC,cAAc,UAAd,0DAAgBO,IAAhB,CAAsBC,MAAD,IAAY;AAC/BhB,QAAAA,qBAAqB,CAACiB,qCAAtB,CAA4DD,MAA5D;AACD,OAFD;AAGD,KAbD,CA7Bc,CA2Cd;AACD,GA5CQ,EA4CN,CAACb,QAAD,EAAWE,SAAX,EAAsBD,IAAtB,CA5CM,CAAT;AA6CD,CAtDM","sourcesContent":["import { MutableRefObject, useEffect, useRef } from 'react';\nimport {\n  NativeModules,\n  FlatList,\n  Platform,\n  findNodeHandle,\n} from 'react-native';\n\nexport type maintainVisibleContentPositionPropType = {\n  autoscrollToTopThreshold?: number | null;\n  minIndexForVisible: number;\n};\n\nexport const MvcpScrollViewManager = NativeModules.MvcpScrollViewManager;\n\nexport const useMvcpTuner = (\n  flRef: MutableRefObject<FlatList | undefined>,\n  refReady: boolean,\n  mvcp?: maintainVisibleContentPositionPropType,\n  extraData?: any\n) => {\n  const autoscrollToTopThreshold = useRef<number>();\n  const minIndexForVisible = useRef<number>();\n\n  useEffect(() => {\n    let cleanupPromise: Promise<number> | undefined;\n    const enableMaintainVisibleContentPosition = (): void => {\n      if (!mvcp || Platform.OS !== 'android' || !flRef?.current) {\n        return;\n      }\n\n      if (\n        autoscrollToTopThreshold.current === mvcp.autoscrollToTopThreshold &&\n        minIndexForVisible.current === mvcp.minIndexForVisible\n      ) {\n        // Don't do anythinig if the values haven't changed\n        return;\n      }\n\n      autoscrollToTopThreshold.current =\n        mvcp.autoscrollToTopThreshold || -Number.MAX_SAFE_INTEGER;\n      minIndexForVisible.current = mvcp.minIndexForVisible || 0;\n\n      const viewTag = findNodeHandle(flRef.current);\n      cleanupPromise = MvcpScrollViewManager.enableMaintainVisibleContentPosition(\n        viewTag,\n        autoscrollToTopThreshold.current,\n        minIndexForVisible.current\n      );\n    };\n\n    enableMaintainVisibleContentPosition();\n\n    return () => {\n      if (\n        mvcp &&\n        autoscrollToTopThreshold.current === mvcp.autoscrollToTopThreshold &&\n        minIndexForVisible.current === mvcp.minIndexForVisible\n      ) {\n        // Don't do anythinig if the values haven't changed\n        return;\n      }\n\n      cleanupPromise?.then((handle) => {\n        MvcpScrollViewManager.disableMaintainVisibleContentPosition(handle);\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [refReady, extraData, mvcp]);\n};\n"]}