{"version":3,"sources":["ScrollView.android.tsx"],"names":["React","useEffect","useRef","NativeModules","Platform","ScrollView","ScrollViewManager","MvcpScrollViewManager","forwardRef","props","forwardedRef","flRef","isMvcpEnabledNative","handle","enableMvcpRetriesCount","isMvcpPropPresentRef","maintainVisibleContentPosition","autoscrollToTopThreshold","Number","MAX_SAFE_INTEGER","minIndexForVisible","retryTimeoutId","debounceTimeoutId","disableMvcpRef","current","disableMaintainVisibleContentPosition","enableMvcpWithRetriesRef","clearTimeout","setTimeout","OS","scrollableNode","getScrollableNode","_handle","enableMaintainVisibleContentPosition","error","propAutoscrollToTopThreshold","propMinIndexForVisible","hasMvcpChanged","refCallback","ref","disableMvcp"],"mappings":"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","sourcesContent":["import React, { MutableRefObject, useEffect, useRef } from 'react';\nimport {\n  NativeModules,\n  Platform,\n  ScrollView,\n  ScrollViewProps,\n} from 'react-native';\n\nexport const ScrollViewManager = NativeModules.MvcpScrollViewManager;\n\nexport default React.forwardRef(\n  (\n    props: ScrollViewProps,\n    forwardedRef:\n      | ((instance: ScrollView | null) => void)\n      | MutableRefObject<ScrollView | null>\n      | null\n  ) => {\n    const flRef = useRef<ScrollView | null>(null);\n    const isMvcpEnabledNative = useRef<boolean>(false);\n    const handle = useRef<number | null>(null);\n    const enableMvcpRetriesCount = useRef<number>(0);\n    const isMvcpPropPresentRef = useRef(!!props.maintainVisibleContentPosition);\n\n    const autoscrollToTopThreshold = useRef<number | null>(\n      props.maintainVisibleContentPosition?.autoscrollToTopThreshold ||\n        -Number.MAX_SAFE_INTEGER\n    );\n    const minIndexForVisible = useRef<number>(\n      props.maintainVisibleContentPosition?.minIndexForVisible || 1\n    );\n    const retryTimeoutId = useRef<NodeJS.Timeout>();\n    const debounceTimeoutId = useRef<NodeJS.Timeout>();\n    const disableMvcpRef = useRef(async () => {\n      isMvcpEnabledNative.current = false;\n      if (!handle?.current) {\n        return;\n      }\n      await ScrollViewManager.disableMaintainVisibleContentPosition(\n        handle.current\n      );\n    });\n    const enableMvcpWithRetriesRef = useRef(() => {\n      // debounce to wait till consecutive mvcp enabling\n      // this ensures that always previous handles are disabled first\n      if (debounceTimeoutId.current) {\n        clearTimeout(debounceTimeoutId.current);\n      }\n      debounceTimeoutId.current = setTimeout(async () => {\n        // disable any previous enabled handles\n        await disableMvcpRef.current();\n\n        if (\n          !flRef.current ||\n          !isMvcpPropPresentRef.current ||\n          isMvcpEnabledNative.current ||\n          Platform.OS !== 'android'\n        ) {\n          return;\n        }\n        const scrollableNode = flRef.current.getScrollableNode();\n\n        try {\n          const _handle: number = await ScrollViewManager.enableMaintainVisibleContentPosition(\n            scrollableNode,\n            autoscrollToTopThreshold.current,\n            minIndexForVisible.current\n          );\n          handle.current = _handle;\n        } catch (error: any) {\n          /**\n           * enableMaintainVisibleContentPosition from native module may throw IllegalViewOperationException,\n           * in case view is not ready yet. In that case, lets do a retry!! (max of 10 tries)\n           */\n          if (enableMvcpRetriesCount.current < 10) {\n            retryTimeoutId.current = setTimeout(\n              enableMvcpWithRetriesRef.current,\n              100\n            );\n            enableMvcpRetriesCount.current += 1;\n          }\n        }\n      }, 300);\n    });\n\n    useEffect(() => {\n      // when the mvcp prop changes\n      // enable natively again, if the prop has changed\n      const propAutoscrollToTopThreshold =\n        props.maintainVisibleContentPosition?.autoscrollToTopThreshold ||\n        -Number.MAX_SAFE_INTEGER;\n      const propMinIndexForVisible =\n        props.maintainVisibleContentPosition?.minIndexForVisible || 1;\n      const hasMvcpChanged =\n        autoscrollToTopThreshold.current !== propAutoscrollToTopThreshold ||\n        minIndexForVisible.current !== propMinIndexForVisible ||\n        isMvcpPropPresentRef.current !== !!props.maintainVisibleContentPosition;\n\n      if (hasMvcpChanged) {\n        enableMvcpRetriesCount.current = 0;\n        autoscrollToTopThreshold.current = propAutoscrollToTopThreshold;\n        minIndexForVisible.current = propMinIndexForVisible;\n        isMvcpPropPresentRef.current = !!props.maintainVisibleContentPosition;\n        enableMvcpWithRetriesRef.current();\n      }\n    }, [props.maintainVisibleContentPosition]);\n\n    const refCallback = useRef<(instance: ScrollView | null) => void>((ref) => {\n      flRef.current = ref;\n      enableMvcpWithRetriesRef.current();\n      if (typeof forwardedRef === 'function') {\n        forwardedRef(ref);\n      } else if (forwardedRef) {\n        forwardedRef.current = ref;\n      }\n    }).current;\n\n    useEffect(() => {\n      const disableMvcp = disableMvcpRef.current;\n      return () => {\n        // clean up the retry mechanism\n        if (debounceTimeoutId.current) {\n          clearTimeout(debounceTimeoutId.current);\n        }\n        // clean up any debounce\n        if (debounceTimeoutId.current) {\n          clearTimeout(debounceTimeoutId.current);\n        }\n        disableMvcp();\n      };\n    }, []);\n\n    return <ScrollView {...props} ref={refCallback} />;\n  }\n);\n"]}